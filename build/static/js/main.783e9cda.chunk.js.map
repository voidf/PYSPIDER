{"version":3,"sources":["utils/constants.js","compo/Pokedex.jsx","compo/Pokemon.jsx","compo/Master.jsx","App.js","reportWebVitals.js","index.js"],"names":["toFirstCharUpperCase","name","charAt","toUpperCase","slice","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","searchContainer","display","backgroundColor","fade","palette","common","white","marginTop","marginBottom","searchIcon","alignSelf","searchInput","width","Pokemon","props","match","history","pokemonId","params","useState","undefined","pokemon","setPokemon","useEffect","axios","get","then","response","data","catch","error","CircularProgress","id","species","height","weight","types","sprites","fullImageUrl","front_default","Typography","variant","src","alt","style","Link","href","url","map","typeInfo","type","generatePokemonJSX","Button","onClick","push","useStyles","baseurl","Master","cryptocurrenciesdata","setcrypto","currencytype","setcurrencytype","anchorEl","setAnchorEl","ppt","setppt","handleClose","e","target","innerText","resp","AppBar","position","Toolbar","color","startIcon","size","uurl","Date","now","ReactDom","render","List","component","ListSubheader","ListItem","button","ListItemText","primary","ListItemIcon","Alarm","AlarmOff","TrendingUp","TrendingDown","Divider","Object","values","item1","parseFloat","toLocaleDateString","console","log","document","querySelector","a","alert","Box","gutterBottom","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","onChange","val","aria-controls","aria-haspopup","event","currentTarget","MonetizationOn","Menu","keepMounted","open","Boolean","onClose","coinsname","MenuItem","Card","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.783e9cda.chunk.js","sourcesContent":["export const toFirstCharUpperCase = name => \r\nname.charAt(0).toUpperCase() + name.slice(1)","import React from 'react';\r\nimport {AppBar, Toolbar, Grid, Card, CardContent, CircularProgress, CardMedia, Typography, TextField} from \"@material-ui/core\"\r\nimport { makeStyles, fade } from '@material-ui/core/styles';\r\nimport axios from \"axios\"\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport { toFirstCharUpperCase } from \"../utils/constants\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pokedexContainer: {\r\n        paddingTop:'20px',\r\n        paddingLeft:'50px',\r\n        paddingRight: '50px'\r\n    },\r\n    cardMedia: {\r\n        margin : \"auto\"\r\n    },\r\n    cardContent : {\r\n        textAlign:\"center\"\r\n    },\r\n    searchContainer: {\r\n        display:`flex`,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        paddingLeft: \"20px\",\r\n        paddingRight: \"20px\",\r\n        marginTop: \"5px\",\r\n        marginBottom: \"5px\"\r\n    },\r\n    searchIcon: {\r\n        alignSelf:\"flex-end\",\r\n        marginBottom: \"5px\"\r\n    },\r\n    searchInput: {\r\n        width: \"200px\",\r\n        margin: \"5px\",\r\n    }\r\n}))\r\n\r\n\r\n\r\nconst Pokedex = (props) => {\r\n\r\n    const {history} = props\r\n    const [pokemonData,setPokemonData] = useState()\r\n    const [filter,setFilter] = useState(\"\")\r\n\r\n    const classes = useStyles()\r\n\r\n    const handleSearchChange = (e) => {\r\n        setFilter(e.target.value)\r\n    } \r\n    useEffect(() => {\r\n        axios\r\n            .get(\"https://pokeapi.co/api/v2/pokemon?limit=807\")\r\n            .then(response => {\r\n                const {data} = response\r\n                const {results} = data\r\n                const newPokemonData = {}\r\n                results.forEach((pokemon,index) => {\r\n                    newPokemonData[index+1] = {\r\n                        id: index+1,\r\n                        name: pokemon.name,\r\n                        sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/back/${index+1}.png`\r\n                    }\r\n                })\r\n                setPokemonData(newPokemonData)\r\n            })\r\n    },[])\r\n\r\n    const getPokemonCard = (pokemonId) => {\r\n        console.log(pokemonData[`${pokemonId}`]);\r\n        const {id,name,sprite} = pokemonData[pokemonId]\r\n        return(\r\n            <Grid item xs={12} sm={6} md={4} key={pokemonId}>\r\n            <Card onClick = {() => history.push(`/${id}`)}>\r\n               <CardMedia \r\n               className = {classes.cardMedia}\r\n               image={sprite}\r\n               style = {{width:\"130px\", height:\"130px\"}}\r\n               />\r\n               <CardContent className={classes.cardContent}>\r\n                   <Typography>\r\n                       {`${id}. ${toFirstCharUpperCase(name)}`}\r\n                   </Typography>\r\n               </CardContent>\r\n            </Card>\r\n            </Grid>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <div className={classes.searchContainer}>\r\n                        <SearchIcon className = {classes.searchIcon}/>\r\n                        <TextField onChange={handleSearchChange} label=\"pokemon\" variant=\"standard\" className={classes.searchInput}/>\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n            {pokemonData? (\r\n                <Grid container spacing={2} className={classes.pokedexContainer}>\r\n                    {Object.keys(pokemonData).map(\r\n                        (pokemonId) => \r\n                        pokemonData[pokemonId].name.includes(filter)&&\r\n                        getPokemonCard(pokemonId)\r\n                    )}\r\n                </Grid>\r\n            ) : <CircularProgress/>\r\n            }\r\n            \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Pokedex;","import React, { useEffect, useState } from \"react\";\r\nimport { Typography, Link, CircularProgress, Button } from \"@material-ui/core\";\r\nimport { toFirstCharUpperCase } from \"../utils/constants\";\r\nimport axios from \"axios\";\r\n\r\nconst Pokemon = (props) => {\r\n  const { match, history } = props;\r\n  const { params } = match;\r\n  const { pokemonId } = params;\r\n  const [pokemon, setPokemon] = useState(undefined);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        setPokemon(data);\r\n      })\r\n      .catch(function (error) {\r\n        setPokemon(false);\r\n      });\r\n  }, [pokemonId]);\r\n\r\n  const generatePokemonJSX = (pokemon) => {\r\n    const { name, id, species, height, weight, types, sprites } = pokemon;\r\n    const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n    const { front_default } = sprites;\r\n    return (\r\n      <>\r\n        <Typography variant=\"h1\">\r\n          {`${id}.`} {toFirstCharUpperCase(name)}\r\n          <img src={front_default} alt=\"\" />\r\n        </Typography>\r\n        <img style={{ width: \"300px\", height: \"300px\" }} src={fullImageUrl} alt=\"\" />\r\n        <Typography variant=\"h3\">Pokemon Info</Typography>\r\n        <Typography>\r\n          {\"Species: \"}\r\n          <Link href={species.url}>{species.name} </Link>\r\n        </Typography>\r\n        <Typography>Height: {height} </Typography>\r\n        <Typography>Weight: {weight} </Typography>\r\n        <Typography variant=\"h6\"> Types:</Typography>\r\n        {types.map((typeInfo) => {\r\n          const { type } = typeInfo;\r\n          const { name } = type;\r\n          return <Typography key={name}> {`${name}`}</Typography>;\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      {pokemon === undefined && <CircularProgress />}\r\n      {pokemon !== undefined && pokemon && generatePokemonJSX(pokemon)}\r\n      {pokemon === false && <Typography> Pokemon not found</Typography>}\r\n      {pokemon !== undefined && (\r\n        <Button variant=\"contained\" onClick={() => history.push(\"/\")}>\r\n          back to pokedex\r\n        </Button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default Pokemon;\r\n","import React from 'react';\r\nimport { Menu, MenuItem, Tab, ListSubheader,Divider,ListItemIcon,List,ListItem,ListItemText,Box, AppBar, Toolbar, Grid, Card, CardContent, CircularProgress, CardMedia, Typography, TextField, Button, Slider, Tabs} from \"@material-ui/core\"\r\nimport { makeStyles, fade } from '@material-ui/core/styles';\r\nimport axios from \"axios\"\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport SearchIcon from \"@material-ui/icons/Search\"\r\nimport ReactDom from 'react-dom';\r\nimport { toFirstCharUpperCase } from \"../utils/constants\";\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport EjectIcon from '@material-ui/icons/Eject';\r\nimport ArchiveIcon from '@material-ui/icons/Archive';\r\nimport {TrendingDown,TrendingUp,Brightness5, Alarm, AlarmOff, MonetizationOn} from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pokedexContainer: {\r\n        paddingTop:'20px',\r\n        paddingLeft:'50px',\r\n        paddingRight: '50px'\r\n    },\r\n    cardMedia: {\r\n        margin : \"auto\"\r\n    },\r\n    cardContent : {\r\n        textAlign:\"center\"\r\n    },\r\n    searchContainer: {\r\n        display:`flex`,\r\n        backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        paddingLeft: \"20px\",\r\n        paddingRight: \"20px\",\r\n        marginTop: \"5px\",\r\n        marginBottom: \"5px\"\r\n    },\r\n    searchIcon: {\r\n        alignSelf:\"flex-end\",\r\n        marginBottom: \"5px\"\r\n    },\r\n    searchInput: {\r\n        width: \"200px\",\r\n        margin: \"5px\",\r\n    }\r\n}))\r\n\r\nconst baseurl = \"http://rinko.work:7012/\"\r\n// const baseurl = \"http://localhost:8000/\"\r\n\r\nconst Master = (props) => {\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    \r\n    const [cryptocurrenciesdata, setcrypto] = useState([]);\r\n    const [currencytype, setcurrencytype] = useState('BTC');\r\n    \r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const {history} = props\r\n    const [ppt, setppt] = useState(30)\r\n    const [filter,setFilter] = useState(\"\")\r\n    \r\n    const classes = useStyles()\r\n\r\n    var extargs = [];\r\n    \r\n    const handleClose = (e) => {\r\n\r\n        // console.log(e.target.innerText);\r\n        \r\n        setcurrencytype(e.target.innerText?e.target.innerText:'BTC')\r\n        // extargs = ['typ='+currencytype]\r\n        // console.log(extargs)\r\n\r\n        setAnchorEl(null);\r\n    };\r\n    // await \r\n\r\n    useEffect(() =>  {\r\n            axios.get(baseurl+'cryptocurrencies').then(\r\n                resp => {\r\n                    // console.log(resp.data);\r\n                    setcrypto(resp.data)\r\n                }\r\n            ) \r\n        }\r\n    ,[]);\r\n\r\n    function generate_items()\r\n    {\r\n        // for(var coinsname in anchorEl)\r\n        // console.log(cryptocurrenciesdata);\r\n        var v =  Object.values(cryptocurrenciesdata).map(coinsname =>\r\n            {\r\n                // console.log(coinsname);\r\n                return(<MenuItem onClick={handleClose}>{coinsname}</MenuItem>);\r\n            }\r\n        )\r\n        // console.log(v);\r\n        return v;\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <AppBar position=\"static\">\r\n\r\n            <Toolbar>\r\n                \r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"secondary\"\r\n                    startIcon={<ArchiveIcon />}\r\n\r\n                    size=\"large\"\r\n                    style={{\r\n                        color:'#FFF',\r\n                        width:'200px',\r\n                        margin:5\r\n                    }}\r\n                    onClick = {()=>{\r\n                        const uurl = baseurl+\"info?ts=\"+Date.now()\r\n                        axios.get(uurl).then(\r\n                            resp => {\r\n                                \r\n                                ReactDom.render(\r\n                                    <div>\r\n                                    <List component=\"nav\">\r\n                                        <ListSubheader>\r\n                                        <ListItem button>\r\n                                                <ListItemText primary=\"日期\" />\r\n                                            {/* <ListItemIcon>\r\n                                                <Brightness5 />\r\n                                            </ListItemIcon> */}\r\n                                                \r\n                                            <ListItemIcon>\r\n                                                <Alarm />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary=\"开盘价\" />\r\n\r\n                                            <ListItemIcon>\r\n                                                <AlarmOff />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary=\"收盘价\" />\r\n\r\n                                            <ListItemIcon>\r\n                                                <TrendingUp />\r\n                                            </ListItemIcon>\r\n\r\n                                            <ListItemText primary=\"最高价\" />\r\n                                            <ListItemIcon>\r\n                                                <TrendingDown />\r\n                                            </ListItemIcon>\r\n                                            <ListItemText primary=\"最低价\" />\r\n\r\n                                        </ListItem></ListSubheader>\r\n                                        <Divider />\r\n                                        {\r\n                                            Object.values(resp.data).map(\r\n                                                (item1) => {\r\n                                                    item1['date'] = new Date(parseFloat(item1['date'])*1000).toLocaleDateString()\r\n                                                    console.log(Object.values(item1))\r\n                                                    console.log(item1)\r\n                                                    return (\r\n                                                        <ListItem button >\r\n                                                                <ListItemText primary={item1['date']} />\r\n                                                                <ListItemText primary={\"  \\t\\t\"+item1['open']} />\r\n                                                                <ListItemText primary={\"  \\t\\t\"+item1['close']} />\r\n                                                                <ListItemText primary={\"  \\t\\t\"+item1['high']} />\r\n                                                                <ListItemText primary={\"  \\t\\t\"+item1['low']} />\r\n                                                        </ListItem >\r\n                                                    )\r\n                                                })\r\n                                        }\r\n\r\n                                    </List>\r\n                                    </div>\r\n                                \r\n                                , document.querySelector(\"#ASDF\"))\r\n                            }\r\n                        )\r\n                    }}\r\n                >库内数据</Button>\r\n\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"secondary\"\r\n                    startIcon={<EjectIcon />}\r\n                    size=\"large\"\r\n                    style={{\r\n                        color:'#FFF',\r\n                        width:'180px',\r\n                        margin:5\r\n                    }}\r\n                    onClick = {()=>{\r\n                        const uurl = baseurl+\"load?prv=\"+ppt+\"&ts=\"+Date.now()+\"&typ=\"+currencytype;\r\n                        const a =(\r\n                            <>\r\n                                <Typography variant=\"h1\">\r\n                                    <img src={uurl} alt=\"\" height=\"100%\" width=\"100%\" />\r\n                                </Typography>\r\n\r\n                            </>\r\n                        );\r\n                        ReactDom.render(a, document.querySelector(\"#ASDF\"))\r\n                    }}\r\n                >读库</Button>\r\n\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"secondary\"\r\n                    startIcon={<SaveIcon />}\r\n                    size=\"large\"\r\n                    style={{\r\n                        color:'#FFF',\r\n                        width:'180px',\r\n                        margin:5\r\n                    }}\r\n                    onClick = {()=>{\r\n                        axios.get(baseurl+\"save?prv=\"+ppt +'&typ='+ currencytype).then(\r\n                            resp=>{\r\n                                console.log(resp);\r\n                                alert(\"存库成功，当前记录数：\"+resp.data);\r\n                            }\r\n                        )\r\n                        // alert()\r\n                    }}\r\n                >入库</Button>\r\n\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"secondary\"\r\n                    startIcon={<ArrowDownwardIcon />}\r\n                    size=\"large\"\r\n                    style={{\r\n                        color:'#FFF',\r\n                        width:'180px',\r\n                        margin:5\r\n                    }}\r\n                    onClick = {()=>{\r\n                        const uurl = baseurl+\"master?prv=\"+ppt+'&typ='+ currencytype;\r\n                        \r\n                        // axios.get(\"http://localhost:8000/master?prv=\"+ppt,\r\n                        // {\r\n                        //     headers:{\r\n                        //         'Access-Control-Allow-Origin':'*'\r\n                        //     },\r\n                        //     responseType:'arraybuffer'\r\n                        // }).then((response)=>{\r\n                        //         return 'data:image/png;base64,' +btoa(new Uint8Array(response.data).reduce((data, byte) => data + String.fromCharCode(byte), ''));\r\n                        //     }).then(data=>{\r\n                        //         const a =(\r\n                        //             <>\r\n                        //                 <Typography variant=\"h1\">\r\n                        //                     <img src={data} alt=\"\" />\r\n                        //                 </Typography>\r\n        \r\n                        //             </>\r\n                        //         );\r\n                        //         ReactDom.render(a, document.querySelector(\"#ASDF\"))\r\n                        //     })\r\n                            const a =(\r\n                                <>\r\n                                    <Typography variant=\"h1\">\r\n                                        <img src={uurl} alt=\"\" height=\"100%\" width=\"100%\" />\r\n                                    </Typography>\r\n    \r\n                                </>\r\n                            );\r\n                            ReactDom.render(a, document.querySelector(\"#ASDF\"))\r\n\r\n                        \r\n                    }}\r\n                >直接爬</Button>\r\n                <Box style={{margin:\"10px\",width:\"100%\"}}>\r\n                    <Typography id=\"discrete-slider\" gutterBottom>\r\n                        需要爬前多少天的数据？\r\n                    </Typography>\r\n\r\n                    <Slider\r\n                        id=\"MX\"\r\n                        defaultValue={30}\r\n                        aria-labelledby=\"discrete-slider\"\r\n                        valueLabelDisplay=\"auto\"\r\n                        step={10}\r\n                        marks\r\n                        min={10}\r\n                        max={360}\r\n                        color=\"secondary\"\r\n                        onChange={(e,val)=>{setppt(val)}}\r\n                        \r\n                    />\r\n                </Box>\r\n\r\n            </Toolbar>\r\n            <Toolbar>\r\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}\r\n                variant=\"contained\" \r\n                color=\"secondary\"\r\n                startIcon={<MonetizationOn />}\r\n                size=\"large\"\r\n                style={{\r\n                    color:'#FFF',\r\n                    width:'150px',\r\n                    margin:5\r\n                }}>\r\n                币种\r\n            </Button>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                {   \r\n                    cryptocurrenciesdata?generate_items():<CircularProgress />\r\n                }\r\n\r\n            </Menu>\r\n                \r\n            </Toolbar>\r\n        </AppBar>\r\n\r\n        <Card id=\"ASDF\" style={{height:\"100%\"}}>\r\n\r\n        </Card>\r\n            \r\n        </>\r\n    );\r\n};\r\n\r\nexport default Master;","import React from \"react\";\nimport Pokedex from \"./compo/Pokedex\";\nimport Pokemon from \"./compo/Pokemon\";\nimport Master from \"./compo/Master\";\nimport { Route, Switch } from \"react-router-dom\";\n\nconst App = () => (\n  <Switch>\n    <Route exact path=\"/\" render={(props) => <Master {...props} />} />\n    <Route\n      exact\n      path=\"/:pokemonId\"\n      render={(props) => <Pokemon {...props} />}\n    />\n  </Switch>\n);\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}